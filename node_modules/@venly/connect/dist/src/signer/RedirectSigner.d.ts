import { ConfirmationRequest } from '../models/ConfirmationRequest';
import { GenericSignatureRequest } from '../models/transaction/GenericSignatureRequest';
import { Signer, SignerResult } from '../signer/Signer';
import { BuildGenericTransferRequestDto } from '../models/transaction/build/BuildGenericTransferRequestDto';
import { BuildTransferRequestDto } from '../models/transaction/build/BuildTransferRequestDto';
import { BuildTokenTransferRequestDto } from '../models/transaction/build/BuildTokenTransferRequestDto';
import { BuildNftTransferRequestDto } from '../models/transaction/build/BuildNftTransferRequestDto';
import { BuildGasTransferRequestDto } from '../models/transaction/build/BuildGasTransferRequestDto';
import { BuildContractExecutionRequestDto } from '../models/transaction/build/BuildContractExecutionRequestDto';
import { BuildMessageSignRequestDto } from '../models/transaction/build/BuildMessageSignRequestDto';
import { BuildEip712SignRequestDto } from '../models/transaction/build/BuildEip712SignRequestDto';
import { ImportWalletRequest } from '../models/wallet/ImportWalletRequest';
export interface RedirectOptions {
    redirectUri?: string;
    correlationID?: string;
}
export declare class RedirectSigner implements Signer {
    private readonly bearerTokenProvider;
    constructor(bearerTokenProvider: () => string);
    executeNativeTransaction(transactionRequest: any, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    /** @Deprecated */
    executeTransaction(buildTransactionRequestOrTransactionId: BuildGenericTransferRequestDto | string, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    executeTransfer(buildTransactionData: BuildTransferRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    executeTokenTransfer(buildTransactionData: BuildTokenTransferRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    executeNftTransfer(buildTransactionData: BuildNftTransferRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    executeGasTransfer(buildTransactionData: BuildGasTransferRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    executeContract(buildTransactionData: BuildContractExecutionRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    executeSavedTransaction(transactionId: string, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    resubmitTransaction(transactionId: string, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    cancelTransaction(transactionId: string, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    private executeProvidedTransaction;
    sign(signatureRequest: GenericSignatureRequest, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    signMessage(buildData: BuildMessageSignRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    signEip712(buildData: BuildEip712SignRequestDto, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    private signProvidedSignature;
    /** Deprecated since v1.1.9: Use 'sign' instead. */
    signTransaction(signatureRequest: GenericSignatureRequest, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    importWallet(request: ImportWalletRequest, redirectOptions?: RedirectOptions): Promise<SignerResult>;
    confirm(request: ConfirmationRequest, redirectOptions?: RedirectOptions): Promise<SignerResult>;
}
